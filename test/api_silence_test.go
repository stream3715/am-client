/*
Alertmanager API

Testing SilenceAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/stream3715/github.com/stream3715/am-client"
)

func Test_openapi_SilenceAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SilenceAPIService DeleteSilence", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var silenceID string

		httpRes, err := apiClient.SilenceAPI.DeleteSilence(context.Background(), silenceID).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SilenceAPIService GetSilence", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var silenceID string

		resp, httpRes, err := apiClient.SilenceAPI.GetSilence(context.Background(), silenceID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SilenceAPIService GetSilences", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SilenceAPI.GetSilences(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SilenceAPIService PostSilences", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SilenceAPI.PostSilences(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
